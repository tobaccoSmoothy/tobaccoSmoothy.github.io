{"mappings":"AA4BA,IAAIA,OAASA,QAAY,GAQzBA,OAAOC,cAAgB,SAASC,GAE/BC,KAAKD,WAAYA,GAAcE,SAE/BD,KAAKE,SAAW,GAChBF,KAAKG,UAAY,GAGjB,IAAIC,EAAQJ,KACZA,KAAKK,WAAa,SAASC,GAAQF,EAAMG,aAAaD,IACtDN,KAAKQ,SAAW,SAASF,GAAQF,EAAMG,aAAaD,IAGpDN,KAAKD,WAAWU,iBAAiB,UAAWT,KAAKK,YAAY,GAC7DL,KAAKD,WAAWU,iBAAiB,QAAST,KAAKQ,UAAU,GAGzDR,KAAKU,QAAU,WACd,IAAI,IAAIC,KAAQP,EAAMF,SAAWE,EAAMF,SAASS,IAAQ,EACxD,IAAI,IAAIA,KAAQP,EAAMD,UAAYC,EAAMD,UAAUQ,IAAQ,GAI3DC,OAAOH,iBAAiB,OAAQT,KAAKU,SAAS,IAM/Cb,OAAOC,cAAce,UAAUC,QAAU,WAGxCd,KAAKD,WAAWgB,oBAAoB,UAAWf,KAAKK,YAAY,GAChEL,KAAKD,WAAWgB,oBAAoB,QAASf,KAAKQ,UAAU,GAG5DI,OAAOG,oBAAoB,OAAQf,KAAKU,SAAS,IAGlDb,OAAOC,cAAckB,UAAY,CAAC,QAAS,OAAQ,MAAO,QAC1DnB,OAAOC,cAAcmB,MAAQ,CAC5BC,KAAU,GACVC,GAAQ,GACRC,MAAW,GACXC,KAAU,GACVC,MAAW,GACXC,OAAW,GACXC,SAAa,GACbC,IAAS,EACTC,OAAW,IAMZ7B,OAAOC,cAAce,UAAUN,aAAe,SAASD,GAMtD,IAAIqB,EAAWrB,EAAMqB,QACjBC,EAA0B,YAAftB,EAAMuB,KACrB7B,KAAKE,SAASyB,GAAWC,EAEzB5B,KAAKG,UAAiB,MAAIG,EAAMwB,SAChC9B,KAAKG,UAAgB,KAAIG,EAAMyB,QAC/B/B,KAAKG,UAAe,IAAIG,EAAM0B,OAC9BhC,KAAKG,UAAgB,KAAIG,EAAM2B,SAShCpC,OAAOC,cAAce,UAAUe,QAAU,SAASM,GAEjD,IADA,IAAIC,EAAOD,EAAQE,MAAM,KACjBC,EAAI,EAAGA,EAAIF,EAAKG,OAAQD,IAAI,CACnC,IAAIE,EAAOJ,EAAKE,GAShB,MAPsD,IAAlDxC,OAAOC,cAAckB,UAAUwB,QAASD,GACjCvC,KAAKG,UAAUoC,IAC0C,GAA1DE,OAAON,KAAKtC,OAAOC,cAAcmB,OAAOuB,QAASD,GAChDvC,KAAKE,SAAUL,OAAOC,cAAcmB,MAAMsB,IAE1CvC,KAAKE,SAASqC,EAAIG,cAAcC,WAAW,KAExC,OAAO,EAEtB,OAAO,GASR9C,OAAOC,cAAce,UAAU+B,aAAe,SAAStC,EAAO4B,GAM7D,IALA,IAAIW,EAAUhD,OAAOC,cAAcmB,MAC/B6B,EAAYL,OAAON,KAAKU,GACxBV,EAAOD,EAAQE,MAAM,KAGjBC,EAAI,EAAGA,EAAIF,EAAKG,OAAQD,IAAI,CACnC,IAAIE,EAAOJ,EAAKE,GACZT,GAAU,EAcd,GAbY,UAARW,EACHX,IAAWtB,EAAMwB,SACA,SAARS,EACTX,IAAWtB,EAAMyB,QACA,QAARQ,EACTX,IAAWtB,EAAM0B,OACA,SAARO,EACTX,IAAWtB,EAAM2B,SACqB,IAA7Ba,EAAUN,QAASD,GAC5BX,EAAWtB,EAAMqB,UAAYkB,EAAQN,GAC5BjC,EAAMqB,UAAYY,EAAIG,cAAcC,WAAW,KACxDf,GAAU,IAENA,EAAU,OAAO,EAEvB,OAAO","sources":["js/threex.keyboardstate.js"],"sourcesContent":["// THREEx.KeyboardState.js keep the current state of the keyboard.\n// It is possible to query it at any time. No need of an event.\n// This is particularly convenient in loop driven case, like in\n// 3D demos or games.\n//\n// # Usage\n//\n// **Step 1**: Create the object\n//\n// ```var keyboard\t= new THREEx.KeyboardState();```\n//\n// **Step 2**: Query the keyboard state\n//\n// This will return true if shift and A are pressed, false otherwise\n//\n// ```keyboard.pressed(\"shift+A\")```\n//\n// **Step 3**: Stop listening to the keyboard\n//\n// ```keyboard.destroy()```\n//\n// NOTE: this library may be nice as standaline. independant from three.js\n// - rename it keyboardForGame\n//\n// # Code\n//\n\n/** @namespace */\nvar THREEx\t= THREEx \t\t|| {};\n\n/**\n * - NOTE: it would be quite easy to push event-driven too\n *   - microevent.js for events handling\n *   - in this._onkeyChange, generate a string from the DOM event\n *   - use this as event name\n*/\nTHREEx.KeyboardState\t= function(domElement)\n{\n\tthis.domElement= domElement\t|| document;\n\t// to store the current state\n\tthis.keyCodes\t= {};\n\tthis.modifiers\t= {};\n\t\n\t// create callback to bind/unbind keyboard events\n\tvar _this\t= this;\n\tthis._onKeyDown\t= function(event){ _this._onKeyChange(event)\t}\n\tthis._onKeyUp\t= function(event){ _this._onKeyChange(event)\t}\n\n\t// bind keyEvents\n\tthis.domElement.addEventListener(\"keydown\", this._onKeyDown, false);\n\tthis.domElement.addEventListener(\"keyup\", this._onKeyUp, false);\n\n\t// create callback to bind/unbind window blur event\n\tthis._onBlur = function(){\n\t\tfor(var prop in _this.keyCodes)  _this.keyCodes[prop] = false;\n\t\tfor(var prop in _this.modifiers)  _this.modifiers[prop] = false;\n\t}\n\n\t// bind window blur\n\twindow.addEventListener(\"blur\", this._onBlur, false);\n}\n\n/**\n * To stop listening of the keyboard events\n*/\nTHREEx.KeyboardState.prototype.destroy\t= function()\n{\n\t// unbind keyEvents\n\tthis.domElement.removeEventListener(\"keydown\", this._onKeyDown, false);\n\tthis.domElement.removeEventListener(\"keyup\", this._onKeyUp, false);\n\n\t// unbind window blur event\n\twindow.removeEventListener(\"blur\", this._onBlur, false);\n}\n\nTHREEx.KeyboardState.MODIFIERS\t= ['shift', 'ctrl', 'alt', 'meta'];\nTHREEx.KeyboardState.ALIAS\t= {\n\t'left'\t\t: 37,\n\t'up'\t\t: 38,\n\t'right'\t\t: 39,\n\t'down'\t\t: 40,\n\t'space'\t\t: 32,\n\t'pageup'\t: 33,\n\t'pagedown'\t: 34,\n\t'tab'\t\t: 9,\n\t'escape'\t: 27\n};\n\n/**\n * to process the keyboard dom event\n*/\nTHREEx.KeyboardState.prototype._onKeyChange\t= function(event)\n{\n\t// log to debug\n\t//console.log(\"onKeyChange\", event, event.keyCode, event.shiftKey, event.ctrlKey, event.altKey, event.metaKey)\n\n\t// update this.keyCodes\n\tvar keyCode\t\t= event.keyCode\n\tvar pressed\t\t= event.type === 'keydown' ? true : false\n\tthis.keyCodes[keyCode]\t= pressed\n\t// update this.modifiers\n\tthis.modifiers['shift']\t= event.shiftKey\n\tthis.modifiers['ctrl']\t= event.ctrlKey\n\tthis.modifiers['alt']\t= event.altKey\n\tthis.modifiers['meta']\t= event.metaKey\n}\n\n/**\n * query keyboard state to know if a key is pressed of not\n *\n * @param {String} keyDesc the description of the key. format : modifiers+key e.g shift+A\n * @returns {Boolean} true if the key is pressed, false otherwise\n*/\nTHREEx.KeyboardState.prototype.pressed\t= function(keyDesc){\n\tvar keys\t= keyDesc.split(\"+\");\n\tfor(var i = 0; i < keys.length; i++){\n\t\tvar key\t\t= keys[i]\n\t\tvar pressed\t= false\n\t\tif( THREEx.KeyboardState.MODIFIERS.indexOf( key ) !== -1 ){\n\t\t\tpressed\t= this.modifiers[key];\n\t\t}else if( Object.keys(THREEx.KeyboardState.ALIAS).indexOf( key ) != -1 ){\n\t\t\tpressed\t= this.keyCodes[ THREEx.KeyboardState.ALIAS[key] ];\n\t\t}else {\n\t\t\tpressed\t= this.keyCodes[key.toUpperCase().charCodeAt(0)]\n\t\t}\n\t\tif( !pressed)\treturn false;\n\t};\n\treturn true;\n}\n\n/**\n * return true if an event match a keyDesc\n * @param  {KeyboardEvent} event   keyboard event\n * @param  {String} keyDesc string description of the key\n * @return {Boolean}         true if the event match keyDesc, false otherwise\n */\nTHREEx.KeyboardState.prototype.eventMatches = function(event, keyDesc) {\n\tvar aliases\t= THREEx.KeyboardState.ALIAS\n\tvar aliasKeys\t= Object.keys(aliases)\n\tvar keys\t= keyDesc.split(\"+\")\n\t// log to debug\n\t// console.log(\"eventMatches\", event, event.keyCode, event.shiftKey, event.ctrlKey, event.altKey, event.metaKey)\n\tfor(var i = 0; i < keys.length; i++){\n\t\tvar key\t\t= keys[i];\n\t\tvar pressed\t= false;\n\t\tif( key === 'shift' ){\n\t\t\tpressed\t= (event.shiftKey\t? true : false)\n\t\t}else if( key === 'ctrl' ){\n\t\t\tpressed\t= (event.ctrlKey\t? true : false)\n\t\t}else if( key === 'alt' ){\n\t\t\tpressed\t= (event.altKey\t\t? true : false)\n\t\t}else if( key === 'meta' ){\n\t\t\tpressed\t= (event.metaKey\t? true : false)\n\t\t}else if( aliasKeys.indexOf( key ) !== -1 ){\n\t\t\tpressed\t= (event.keyCode === aliases[key] ? true : false);\n\t\t}else if( event.keyCode === key.toUpperCase().charCodeAt(0) ){\n\t\t\tpressed\t= true;\n\t\t}\n\t\tif( !pressed )\treturn false;\n\t}\n\treturn true;\n}\n\n\n"],"names":["THREEx","KeyboardState","domElement","this","document","keyCodes","modifiers","_this","_onKeyDown","event","_onKeyChange","_onKeyUp","addEventListener","_onBlur","prop","window","prototype","destroy","removeEventListener","MODIFIERS","ALIAS","left","up","right","down","space","pageup","pagedown","tab","escape","keyCode","pressed","type","shiftKey","ctrlKey","altKey","metaKey","keyDesc","keys","split","i","length","key","indexOf","Object","toUpperCase","charCodeAt","eventMatches","aliases","aliasKeys"],"version":3,"file":"index.a8c1469d.js.map"}